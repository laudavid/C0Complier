const int _a = 97
const int b = 10
const char d = 'a'
var int x
var int p
var char y
var char z
var int test
array int apples 100
array char str 100
void BoringGreetings()
const int temp = -1
var int control
$t0 = 2
control = $t0
label_0:
$t0 = control
$t1 = 2
$t0 = $t0 * $t1
$t1 = 3
$t0 = $t0 * $t1
$t1 = 4
$t0 = $t0 / $t1
BZ label_1
$t0 = "empty parameter list & condition is a single expression"
push $t0
$t1 = control
push $t1
call printf
$t0 = control
$t1 = 1
$t0 = $t0 - $t1
control = $t0
GOTO label_0
label_1:
$t0 = 1
$t1 = 1
$t0 = $t0 + $t1
$t1 = 3
$t0 < $t1
BZ label_2
$t0 = "as plain as daylight 1\\n"
push $t0
call printf
label_2:
$t0 = 1
$t1 = 1
$t0 = $t0 + $t1
$t1 = 1
$t0 > $t1
BZ label_3
$t0 = "as plain as daylight 2"
push $t0
call printf
label_3:
$t0 = "Print an expression alone & print string with expression & all the <zi fu>"
push $t0
call printf
$t0 = 0
$t1 = 1
apples[$t0] = $t1
$t0 = 1
$t1 = 12340
apples[$t0] = $t1
$t0 = 2
$t1 = 56789
apples[$t0] = $t1
$t0 = _a
$t1 = 'a'
$t2 = 0
$t1 = $t1 + $t2
$t0 == $t1
BZ label_4
$t0 = "apples[0] is"
push $t0
$t1 = 0
$t1 = apples[$t1]
push $t1
call printf
label_4:
$t0 = temp
$t0 = -$t0
$t1 = 10
$t0 = $t0 * $t1
$t1 = 10
$t0 = $t0 / $t1
$t1 = _a
$t2 = b
$t1 = $t1 * $t2
$t2 = d
$t1 = $t1 / $t2
$t0 = $t0 + $t1
$t1 = 0
$t1 = apples[$t1]
$t0 = $t0 + $t1
$t1 = '_'
$t2 = '+'
$t1 = $t1 * $t2
$t2 = '-'
$t3 = '*'
$t2 = $t2 + $t3
$t1 = $t1 / $t2
$t0 = $t0 + $t1
$t1 = '/'
$t0 = $t0 + $t1
$t1 = 'A'
$t0 = $t0 + $t1
$t1 = 'B'
$t0 = $t0 + $t1
$t1 = 'C'
$t0 = $t0 + $t1
$t1 = 'D'
$t0 = $t0 + $t1
$t1 = 'E'
$t0 = $t0 + $t1
$t1 = 'F'
$t0 = $t0 + $t1
$t1 = 'G'
$t0 = $t0 + $t1
$t1 = 'H'
$t0 = $t0 + $t1
$t1 = 'I'
$t0 = $t0 + $t1
$t1 = 'J'
$t0 = $t0 + $t1
$t1 = 'K'
$t0 = $t0 + $t1
$t1 = 'L'
$t0 = $t0 + $t1
$t1 = 'M'
$t0 = $t0 + $t1
$t1 = 'N'
$t0 = $t0 + $t1
$t1 = 'O'
$t0 = $t0 + $t1
$t1 = 'P'
$t0 = $t0 + $t1
$t1 = 'Q'
$t0 = $t0 + $t1
$t1 = 'R'
$t0 = $t0 + $t1
$t1 = 'S'
$t0 = $t0 + $t1
$t1 = 'T'
$t0 = $t0 + $t1
$t1 = 'U'
$t0 = $t0 + $t1
$t1 = 'V'
$t0 = $t0 + $t1
$t1 = 'W'
$t0 = $t0 + $t1
$t1 = 'X'
$t0 = $t0 + $t1
$t1 = 'Y'
$t0 = $t0 + $t1
$t1 = 'Z'
$t0 = $t0 + $t1
$t1 = 'a'
$t0 = $t0 + $t1
$t1 = 'b'
$t0 = $t0 + $t1
$t1 = 'c'
$t0 = $t0 + $t1
$t1 = 'd'
$t0 = $t0 + $t1
$t1 = 'e'
$t0 = $t0 + $t1
$t1 = 'f'
$t0 = $t0 + $t1
$t1 = 'g'
$t0 = $t0 + $t1
$t1 = 'h'
$t0 = $t0 + $t1
$t1 = 'i'
$t0 = $t0 + $t1
$t1 = 'j'
$t0 = $t0 + $t1
$t1 = 'k'
$t0 = $t0 + $t1
$t1 = 'l'
$t0 = $t0 + $t1
$t1 = 'm'
$t0 = $t0 + $t1
$t1 = 'n'
$t0 = $t0 + $t1
$t1 = 'o'
$t0 = $t0 + $t1
$t1 = 'p'
$t0 = $t0 + $t1
$t1 = 'q'
$t0 = $t0 + $t1
$t1 = 'r'
$t0 = $t0 + $t1
$t1 = 's'
$t0 = $t0 + $t1
$t1 = 't'
$t0 = $t0 + $t1
$t1 = 'u'
$t0 = $t0 + $t1
$t1 = 'v'
$t0 = $t0 + $t1
$t1 = 'w'
$t0 = $t0 + $t1
$t1 = 'x'
$t0 = $t0 + $t1
$t1 = 'y'
$t0 = $t0 + $t1
$t1 = 'z'
$t0 = $t0 + $t1
push $t0
call printf
$t0 = " !#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
push $t0
call printf
ret
ret
char BoringGreetings2()
$t0 = "Some empty sentences"
push $t0
call printf
$t0 = 'd'
ret $t0
ret
void AllValidCharInt()
para char min
para char max
para int a1
para int a2
para int a3
para int a4
para int x
var char c
var int signal
var int count
array int sreg 10
$t0 = 0
$t1 = a4
sreg[$t0] = $t1
$t0 = 1
count = $t0
label_5:
$t0 = count
$t1 = 10
$t0 < $t1
BZ label_6
$t0 = count
$t1 = count
$t2 = 1
$t1 = $t1 - $t2
$t1 = sreg[$t1]
$t2 = 1
$t1 = $t1 + $t2
sreg[$t0] = $t1
$t0 = count
$t1 = 1
$t0 = $t0 + $t1
count = $t0
GOTO label_5
label_6:
$t0 = 0
count = $t0
label_7:
$t0 = count
$t1 = 10
$t0 < $t1
BZ label_8
$t0 = "sreg[count] is"
push $t0
$t1 = count
$t1 = sreg[$t1]
push $t1
call printf
$t0 = count
$t1 = 1
$t0 = $t0 + $t1
count = $t0
GOTO label_7
label_8:
$t0 = 0
signal = $t0
$t0 = a1
x = $t0
$t0 = a3
$t1 = a4
$t2 = a2
$t1 = $t1 / $t2
$t0 = $t0 + $t1
p = $t0
$t0 = min
c = $t0
$t0 = "if & switch & condition is a relation expression & all valid string & valid char,num"
push $t0
call printf
label_9:
$t0 = c
$t1 = max
$t0 <= $t1
BZ label_10
$t0 = c
$t1 = 0
$t0 = $t0 + $t1
$t1 = 34
$t0 != $t1
BZ label_11
$t0 = c
$t1 = 0
$t0 = $t0 + $t1
$t1 = 32
$t0 >= $t1
BZ label_12
$t0 = c
$t1 = '_'
$t0 == $t1
BZ label_14
$t0 = 1
signal = $t0
GOTO label_13
label_14:
$t1 = '+'
$t0 == $t1
BZ label_15
$t0 = 1
signal = $t0
GOTO label_13
label_15:
$t1 = '-'
$t0 == $t1
BZ label_16
$t0 = 1
signal = $t0
GOTO label_13
label_16:
$t1 = '*'
$t0 == $t1
BZ label_17
$t0 = 1
signal = $t0
GOTO label_13
label_17:
$t1 = '/'
$t0 == $t1
BZ label_18
$t0 = 1
signal = $t0
GOTO label_13
label_18:
$t0 = c
$t1 = '0'
$t0 = $t0 - $t1
$t1 = 0
$t0 >= $t1
BZ label_19
$t0 = c
$t1 = '9'
$t0 = $t0 - $t1
$t1 = 0
$t0 <= $t1
BZ label_20
$t0 = 1
signal = $t0
label_20:
label_19:
$t0 = c
$t1 = 'A'
$t0 = $t0 - $t1
$t1 = 0
$t0 >= $t1
BZ label_21
$t0 = c
$t1 = 'Z'
$t0 = $t0 - $t1
$t1 = 0
$t0 <= $t1
BZ label_22
$t0 = 1
signal = $t0
label_22:
label_21:
$t0 = c
$t1 = 'a'
$t0 = $t0 - $t1
$t1 = 0
$t0 >= $t1
BZ label_23
$t0 = c
$t1 = 'z'
$t0 = $t0 - $t1
$t1 = 0
$t0 <= $t1
BZ label_24
$t0 = 1
signal = $t0
label_24:
label_23:
label_13:
label_12:
$t0 = c
$t1 = min
$t0 = $t0 - $t1
$t1 = c
str[$t0] = $t1
$t0 = signal
$t1 = 1
$t0 == $t1
BZ label_25
$t0 = "A valid <zi fu>"
push $t0
$t1 = c
$t2 = min
$t1 = $t1 - $t2
$t1 = str[$t1]
push $t1
call printf
$t0 = 0
signal = $t0
label_25:
label_11:
$t0 = c
$t1 = 0
$t0 = $t0 + $t1
$t1 = 34
$t2 = -34
$t1 = $t1 + $t2
$t2 = 34
$t1 = $t1 + $t2
$t0 == $t1
BZ label_26
$t0 = "char 34 is not included!"
push $t0
call printf
label_26:
$t0 = 'c'
c = $t0
GOTO label_9
label_10:
$t0 = p
$t1 = 1
$t0 = $t0 + $t1
p = $t0
$t0 = 'a'
y = $t0
$t0 = y
$t1 = 1
$t0 = $t0 + $t1
p = $t0
$t0 = 'b'
z = $t0
$t0 = z
$t1 = 2
$t0 = $t0 + $t1
p = $t0
$t0 = 'c'
z = $t0
$t0 = 'c'
y = $t0
ret
ret
int RecursionGCD()
para int a
para int b
$t0 = b
$t1 = 0
$t0 == $t1
BZ label_27
$t0 = a
ret $t0
label_27:
$t0 = b
$t1 = 0
$t0 != $t1
BZ label_28
$t0 = b
push $t0
$t0 = a
$t1 = a
$t2 = b
$t1 = $t1 / $t2
$t2 = b
$t1 = $t1 * $t2
$t0 = $t0 - $t1
push $t0
call RecursionGCD
$t0 = RET
ret $t0
label_28:
ret
void main()
const char name = 'n'
var int A
var int B
var int temp
$t0 = "Input two numbers to calculate GCD"
push $t0
call printf
push $t34
push $t35
call scanf
$t0 = "Two input for GCD "
push $t0
$t1 = A
push $t1
call printf
$t0 = B
push $t0
call printf
$t0 = A
push $t0
$t0 = B
push $t0
call RecursionGCD
$t0 = RET
temp = $t0
$t0 = "Greatest Common Division of "
push $t0
$t1 = A
push $t1
call printf
$t0 = B
push $t0
call printf
$t0 = "is "
push $t0
$t1 = temp
push $t1
call printf
$t0 = A
$t1 = 100
$t0 == $t1
BZ label_30
$t0 = "100"
push $t0
call printf
call BoringGreetings
$t0 = "Hello Worl"
push $t0
call BoringGreetings2
$t1 = RET
push $t1
call printf
$t0 = 'a'
push $t0
$t0 = 'b'
push $t0
$t0 = 9
push $t0
$t0 = 10
push $t0
$t0 = 11
push $t0
$t0 = 12
push $t0
$t0 = 13
push $t0
call AllValidCharInt
GOTO label_29
label_30:
$t1 = -1
$t0 == $t1
BZ label_31
$t0 = "Empty Default Case"
push $t0
call printf
GOTO label_29
label_31:
label_29:
ret
ret
