    const int con1 = 1
    const int con2 = 2
    const char ch1 = '_'
    var int i
    var int j
    array int array 100
    var int scope_var
    var char ch
    

int Fibonacci()
    para int n
    n == 1
    BZ label_0
    ret
    label_0:
    n == 2
    BZ label_1
    ret
    label_1:
    $t2 = n - 1
    push $t2
    call Fibonacci
    $t3 = RET
    $t4 = n - 2
    push $t4
    call Fibonacci
    $t5 = RET
    $t6 = $t3 + $t5
    ret
    ret
    

int test_recursion()
    push 8
    call Fibonacci
    $t0 = RET
    $t0 == 21
    BZ label_2
    push "success!"
    call printf
    ret
    label_2:
    push "fail!"
    call printf
    ret
    ret
    

int test_if()
    para int plus
    const char flag = 'g'
    var char ch
    ch = 'a'
    0 != 0
    BZ label_3
    push "fail1!"
    call printf
    label_3:
    ret
    ret
    

void test_while()
    const int j = 100
    var int sum
    sum = 0
    i = 0
    label_4:
    $t0 = i
    $t0 < 100
    BZ label_5
    $t2 = i
    $t3 = i
    array[$t2] = $t3
    $t4 = i
    $t5 = $t4 + 1
    i = $t5
    GOTO label_4
    label_5:
    i = 0
    label_6:
    $t6 = i
    $t6 < 100
    BZ label_7
    $t8 = i
    $t9 = sum + $t8
    sum = $t9
    $t10 = i
    $t11 = $t10 + 1
    i = $t11
    GOTO label_6
    label_7:
    sum == 4950
    BZ label_8
    push "success!"
    call printf
    ret
    label_8:
    push "fail!"
    call printf
    ret
    ret
    

void test_switch()
    var char flag
    flag = 'a'
    flag == 'a'
    BZ label_10
    push "success!"
    call printf
    GOTO label_9
    label_10:
    push "fail!"
    call printf
    label_9:
    ret
    

int to_upper()
    para char a
    para int b
    $t0 = a - b
    ret
    ret
    

void test_scanf_printf()
    var char a
    var char b
    var char c
    push a
    push b
    push c
    call scanf
    push "Input is:"
    call printf
    push a
    call printf
    push b
    call printf
    push c
    call printf
    push a
    push 32
    call to_upper
    $t0 = RET
    push $t0
    call printf
    push b
    push 32
    call to_upper
    $t1 = RET
    push $t1
    call printf
    push c
    push 32
    call to_upper
    $t2 = RET
    push $t2
    call printf
    ret
    

void test_relation_operator()
    para int x
    para int y
    x == y
    BZ label_11
    push " x==y:true"
    call printf
    label_11:
    x > y
    BZ label_12
    push " x>y:true"
    call printf
    label_12:
    x < y
    BZ label_13
    push " x<y:true"
    call printf
    label_13:
    x >= y
    BZ label_14
    push " x>=y:true"
    call printf
    label_14:
    x <= y
    BZ label_15
    push " x<=y:true"
    call printf
    label_15:
    x != y
    BZ label_16
    push " x!=y:true"
    call printf
    label_16:
    ret
    

void test_expression()
    var int x
    var int y
    var int z
    array int A 1
    x = 10
    y = 1
    A[0] = 2
    $t0 = 1 * x
    $t1 = A[0]
    $t2 = $t0 * $t1
    $t3 = -y
    $t4 = $t2 * $t3
    $t5 = $t4 * y
    $t6 = $t5 / 2
    $t7 = -$t6
    $t8 = $t7 + '*'
    push 'a'
    push 32
    call to_upper
    $t9 = RET
    $t10 = $t8 + $t9
    $t11 = $t10 - 'A'
    $t12 = x + $t11
    z = $t12
    z == 62
    BZ label_17
    push "success!"
    call printf
    ret
    label_17:
    push "fail!"
    call printf
    ret
    ret
    

void test_symbol()
    var char _a1
    var char _a2
    var char _a3
    var char _a4
    var char _a5
    var int aa
    var int Aa
    array int array 30
    var int i
    var int sum
    _a1 = '*'
    _a2 = '/'
    _a3 = '+'
    _a4 = '-'
    _a5 = '_'
    aa = 1
    Aa = 0
    aa == 0
    BZ label_18
    push "fail1!"
    call printf
    label_18:
    i = 0
    $t1 = _a1 + _a2
    $t2 = $t1 + _a3
    $t3 = $t2 + _a4
    $t4 = $t3 + _a5
    sum = $t4
    label_19:
    i < 10
    BZ label_20
    array[i] = i
    $t6 = i + 1
    i = $t6
    GOTO label_19
    label_20:
    label_21:
    i < 20
    BZ label_22
    $t8 = 'a' + i
    $t9 = $t8 - 10
    array[i] = $t9
    $t10 = i + 1
    i = $t10
    GOTO label_21
    label_22:
    label_23:
    i < 30
    BZ label_24
    $t12 = 'A' + i
    $t13 = $t12 - 20
    array[i] = $t13
    $t14 = i + 1
    i = $t14
    GOTO label_23
    label_24:
    i = 0
    label_25:
    i < 30
    BZ label_26
    $t16 = array[i]
    $t17 = sum + $t16
    sum = $t17
    $t18 = i + 1
    i = $t18
    GOTO label_25
    label_26:
    sum == 2027
    BZ label_27
    push "success!"
    call printf
    ret
    label_27:
    push "fail2!"
    call printf
    ret
    ret
    

void local_scope()
    var int scope_var
    scope_var = 10
    push "the local scope_var = "
    push scope_var
    call printf
    ret
    

void test_scope()
    var int tem
    scope_var = 20
    $t0 = scope_var
    tem = $t0
    push "the global scope_var = "
    $t1 = scope_var
    push $t1
    call printf
    call local_scope
    push "the global scope_var = "
    $t2 = scope_var
    push $t2
    call printf
    $t3 = scope_var
    tem == $t3
    BZ label_28
    push "success!"
    call printf
    ret
    label_28:
    push "fail!"
    call printf
    ret
    ret
    

void test()
    var int i
    var int j
    var int k
    j = 0
    k = 9
    label_29:
    j < k
    BZ label_30
    push i
    call scanf
    i == 0
    BZ label_32
    push "test_recursion begin:"
    call printf
    call test_recursion
    GOTO label_31
    label_32:
    i == 1
    BZ label_33
    push "test_if begin:"
    call printf
    push 20
    call test_if
    GOTO label_31
    label_33:
    i == 2
    BZ label_34
    push "test_while begin:"
    call printf
    call test_while
    GOTO label_31
    label_34:
    i == 3
    BZ label_35
    push "test_switch begin:"
    call printf
    call test_switch
    GOTO label_31
    label_35:
    i == 4
    BZ label_36
    push "test_scanf_printf begin:"
    call printf
    call test_scanf_printf
    GOTO label_31
    label_36:
    i == 5
    BZ label_37
    push "test_expression begin:"
    call printf
    call test_expression
    GOTO label_31
    label_37:
    i == 6
    BZ label_38
    push "test_symbol begin:"
    call printf
    call test_symbol
    GOTO label_31
    label_38:
    i == 7
    BZ label_39
    push "test_relation_operator begin:"
    call printf
    push 3
    push 6
    call test_relation_operator
    push 7
    push 5
    call test_relation_operator
    push 2
    push 2
    call test_relation_operator
    GOTO label_31
    label_39:
    i == 8
    BZ label_40
    push "test_scope begin:"
    call printf
    call test_scope
    GOTO label_31
    label_40:
    label_31:
    push "*********************"
    call printf
    $t10 = j + 1
    j = $t10
    GOTO label_29
    label_30:
    ch = '_'
    push "ch="
    $t11 = ch
    push $t11
    call printf
    push "@#$$&*^^^^test end"
    call printf
    ret
    

void main()
    call test
    ret
