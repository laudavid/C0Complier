const int yur=100,gniosg=144;
const char ttt='z', gjisf = 'l';
int qwer[100];
char z[400];
char a[100];
int num;

int test_add(int x,int y){
    printf(x+y);
    return (x+y);
}
int fib(int yur){
    if (yur<3){
        return (1);
    }else{
        return (fib(yur-1)+fib(yur-2));
    }
    return (1);
}
void testCondition{
    int t1,t2;
    t1=1;t2=2;
    if(t1<t2) printf("< done");else printf("<error");
    t1=1;t2=2;
    if(t1<=t2) printf("<= done");else printf("<=error");
    t1=3;t2=2;
    if(t1>t2) printf("> done");else printf(">error");
    t1=3;t2=2;
    if(t1>=t2) printf(">= done");else printf(">=error");
    t1=2;t2=2;
    if(t1==t2) printf("== done");else printf("==error");
    t1=1;t2=2;
    if(t1!=t2) printf("!= done");else printf("!=error");
    return;

}
void testCaseComplex(int u,int v,char w,char x){
    int t;
    switch (u+v){
        case 0:{
            if (w!=x){
                printf("1-1");
            }else{
                printf("1-2");
            }
        }
        case 1:{
            printf("2-1 ",fib(10));
        }
        case 2:{
            t=0;
            printf("3-1");
            do{
                printf(t);
                t=t+1;
            }while(t<10)
        }
        default:{
            switch (w){
                case 'a':{
                    printf("4-1");
                }
                case 'z': printf("4-2");
                default: printf("4-3");
            }
        }
    }
}


void decrease{
    int i,j;
    char tmp;
    i=0;
    j=0;
    do{
        j=0;
        do{
            if (a[j]<a[j+1]){
                tmp=a[j];
                a[j]=a[j+1];
                a[j+1]=tmp;
            }else{
            ;
            }
            j=j+1;
        }while(j+1<num)
        i=i+1;
    }while (i<num)
    i=0;
    do{
        printf(a[i]);
        i=i+1;
    }while (i<num)
}
void increase{
    int i,j;
    char tmp;
    i=0;
    j=0;
    do{
        j=0;
        do{
            if (a[j]<=a[j+1]){
                ;
            }else{
                tmp=a[j];
                a[j]=a[j+1];
                a[j+1]=tmp;
            }
            j=j+1;
        }while(j+1<num)
        i=i+1;
    }while (i<num)
    i=0;
    do{
        printf(a[i]);
        i=i+1;
    }while (i<num)
}

int test_func_int(int a) {
	return (a * a + 'b'-'a');
}

char test_char(char a) {
	return (a);
}

void main(){
    int i;
    char j;
    char bc[100];
    scanf(num);
    i=0;
    do{
        scanf(j);
        bc[i]=j;
        i=i+1;
    }while (i<num)
    i=0;
    do{
        a[i]=bc[i];
        i=i+1;
    }while (i<num)
    decrease;
    increase;
    printf(yur);
    printf("fib");
    i=0;
    do{
        printf(fib(i));
        i=i+1;
    }while (i<20);
    printf("global: ",yur);
    testCaseComplex(0,0,'a','a');
    testCaseComplex(0,0,'a','b');
    testCaseComplex(0,1,'a','b');
    testCaseComplex(1,1,'a','b');
    testCaseComplex(4,2,'a','a');
    testCaseComplex(4,2,'z','z');
    testCaseComplex(4,2,'b','b');
    test_add(1,test_add(2,3));
    testCondition;
    printf(test_func_int(10));
    printf(test_char('a'));
    qwer[0]=1000;
    i=(((((-100--200)))+300))+qwer[qwer[qwer[qwer[qwer[qwer[qwer[qwer[1]+2]+3]+4]+5]+6]+7]+0];
    printf(i);
}